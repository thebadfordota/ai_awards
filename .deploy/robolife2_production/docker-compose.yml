version: '3.8'
services:
  postgres_db:
    container_name: postgres_db
    image: postgres:15.1-alpine
    ports:
      - "5432:5432"
    networks:
      robolife2_network:
        aliases:
          - postgres_db
    restart: on-failure
    env_file:
      - ../../backend/.env.dev
    volumes:
      - robolife2_pg_volume:/var/lib/postgresql/data

  nginx_proxy_server:
    build:
      context: ../../
      dockerfile: ./frontend/Dockerfile
    container_name: nginx_proxy_server
    depends_on:
      - django_server
    restart: on-failure
    ports:
      - "80:80"
    networks:
      robolife2_network:
        aliases:
          - nginx_proxy_server
    volumes:
      - ./compose_files/nginx.conf:/etc/nginx/nginx.conf
      - robolife2_django_server_static:/django_static
      - robolife2_django_server_media:/django_media

  django_server:
    container_name: django_server
    build:
      context: ../..
      dockerfile: ./backend/.build/Dockerfile
    restart: on-failure
    depends_on:
      - postgres_db
    volumes:
      - ../../backend:/code/
      - robolife2_django_server_static:/code/static
      - robolife2_django_server_media:/code/media
    ports:
      - "8000:8000"
    networks:
      robolife2_network:
        aliases:
          - django_server
    env_file:
      - ../../backend/.env.dev
    command:
      - sh
      - -c
      - 'python manage.py migrate --database=default --noinput
      && python manage.py shell -c
            "from django.contrib.auth import get_user_model;
            User = get_user_model();
            User.objects.filter(username=\"admin\").exists() or User.objects.create_superuser(username=\"admin\", password=\"1\")"
      && python manage.py collectstatic --noinput
      && gunicorn --bind 0.0.0.0:8000 config.wsgi:application --reload'

  celery_worker:
    container_name: celery_worker
    build:
      context: ../..
      dockerfile: ./backend/.build/Dockerfile
    restart: unless-stopped
    command: celery -A config worker -E -l INFO
    depends_on:
      - django_server
      - redis_db
    volumes:
      - ../../backend:/code/
    networks:
      robolife2_network:
        aliases:
          - celery_worker

  celery_beat_worker:
    container_name: celery_beat_worker
    build:
      context: ../..
      dockerfile: ./backend/.build/Dockerfile
    restart: unless-stopped
    command: celery -A config beat -l INFO
    depends_on:
      - django_server
      - redis_db
    volumes:
      - ../../backend:/code/
    networks:
      robolife2_network:
        aliases:
          - celery_beat_worker

  redis_db:
    container_name: redis_db
    image: redis:5.0.8-alpine
    depends_on:
      - django_server
    ports:
      - "6379:6379"
    volumes:
      - ./data:/data
      - ./redis.conf:/etc/redis.conf
    command: redis-server /etc/redis.conf --appendonly yes
    networks:
      robolife2_network:
        aliases:
          - redis_db

volumes:
  robolife2_pg_volume:
  robolife2_django_server_static:
  robolife2_django_server_media:

networks:
  robolife2_network:
    name: robolife2_network
    external: false

